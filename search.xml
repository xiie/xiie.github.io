<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[nginx proxy_cache]]></title>
      <url>https://xiie.github.io/2018/05/nginx-proxy-cache/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>Nginx自带缓存，实现动静分离的分层架构。</p>
</blockquote>
<a id="more"></a>
<p>nginx自己有单独的进程来对磁盘上的缓存文件进行扫描，在内存中建立缓存索引。并且有管理进程来对缓存进行过期判断，更新等操作</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="首先需要在http内声明缓存配置"><a href="#首先需要在http内声明缓存配置" class="headerlink" title="首先需要在http内声明缓存配置"></a>首先需要在http内声明缓存配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    proxy_cache_path /dev/shm/nginx/ngx_cache_one levels=1:2 keys_zone=ngx_cache_one:10m inactive=5m max_size=200m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>指令参数说明:</p>
<ul>
<li>proxy_cache_path: 缓存文件路径</li>
<li>levels: 一般最多三级，这里指定二级，第一级目录一个字符命名，第二级有两个字符命名(总共含有16<em>16</em>16=4096个文件目录)</li>
<li>keys_zone: 设置缓存名称 和 存储在内存中的元数据的大小</li>
<li>inactive: 在指定时间内没人访问则被删除</li>
<li>max_size: 最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源</li>
</ul>
<h3 id="接下来需要配置-nginx-vhost-server"><a href="#接下来需要配置-nginx-vhost-server" class="headerlink" title="接下来需要配置 nginx vhost server"></a>接下来需要配置 nginx vhost server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    location /post &#123;</div><div class="line">        add_header  Nginx-Cache $upstream_cache_status;</div><div class="line">        proxy_cache ngx_cache_one;</div><div class="line">        proxy_cache_valid 200 206 304 301 302 2m;</div><div class="line">        proxy_cache_key $uri;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http://127.0.0.1:8080;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置项介绍:</p>
<ul>
<li>proxy_cache: 使用名为ngx_cache_one的缓存配置</li>
<li>proxy_cache_valid: 成功响应的缓存时间</li>
<li>proxy_cache_key:  定义缓存唯一key,通过唯一key来进行hash存取(缓存文件名为md5($uri))</li>
<li>proxy_set_header: 自定义http header头，用于发送给后端真实服务器</li>
<li>proxy_pass: 缓存如未命中，则代理到的后端服务器</li>
</ul>
<p>过期指令优先级排序：<br>inactvie &gt; 源服务器端Expires、源服务器端max-age &gt; proxy_cache_valid</p>
<h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><h3 id="主动清理缓存"><a href="#主动清理缓存" class="headerlink" title="主动清理缓存"></a>主动清理缓存</h3><p>需要用到的 proxy_cache_purge 指令与 proxy_cache 相反。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    location /purge(/.*) &#123;</div><div class="line">        allow 127.0.0.1; //只允许本机访问  </div><div class="line">        deny all; //禁止其他所有ip  </div><div class="line">        proxy_cache_purge ngx_cache_one $host$1;  //清理缓存</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>proxy_cache_purge 指令的第一个参数就是 proxy_cache_path 中指定的 keys_zone</p>
<h3 id="通过软链接扩容目录磁盘空间"><a href="#通过软链接扩容目录磁盘空间" class="headerlink" title="通过软链接扩容目录磁盘空间"></a>通过软链接扩容目录磁盘空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; ln -s /bak/test/cache/0 /dev/shm/nginx/cache/0</div></pre></td></tr></table></figure>
<h3 id="支持客户端Range请求（断点续传）"><a href="#支持客户端Range请求（断点续传）" class="headerlink" title="支持客户端Range请求（断点续传）"></a>支持客户端Range请求（断点续传）</h3><p>当缓存代理转发http请求到后端服务器时，http header会改变，header中的部分参数，会被取消掉。其中range参数被取消，导致，后端nginx服务器没有收到range参数，最终导致这个分片下载不成功。所以需要对代理转发的header进行配置。</p>
<p>为了确保range请求下，proxy_cache_key的唯一性，需要引入$http_range</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    location /post &#123;</div><div class="line">        add_header  Nginx-Cache $upstream_cache_status;</div><div class="line">        proxy_cache ngx_cache_one;</div><div class="line">        proxy_cache_valid 200 206 304 301 302 2m;</div><div class="line">        proxy_cache_key $http_range$uri;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header Range $http_range;</div><div class="line">        proxy_pass http://127.0.0.1:8080;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相关链接</p>
<ul>
<li><a href="https://blog.csdn.net/dengjiexian123/article/details/53386586" target="_blank" rel="external">nginx proxy_cache 缓存配置</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html" target="_blank" rel="external">理解 Linux 的硬链接与软链接</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS创建swap分区]]></title>
      <url>https://xiie.github.io/2017/03/add-swap-for-linux/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>听哥的话，小内存的机器，把swap加上，只有好处，没有坏处。</p>
</blockquote>
<a id="more"></a>
<h3 id="创建swap步骤"><a href="#创建swap步骤" class="headerlink" title="创建swap步骤"></a>创建swap步骤</h3><p>根目录下先创建swap目录（哥一开始参考的教程竟然直接创建在/tmp目录下，重启服务器直接蒙蔽了－－｜）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /</div><div class="line"># mkdir swap</div><div class="line"># cd /swap</div></pre></td></tr></table></figure></p>
<p>创建一个 1G 大小的文件块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># dd if=/dev/zero of=swapfile bs=1M count=1024</div><div class="line"></div><div class="line">记录了1024+0 的读入</div><div class="line">记录了1024+0 的写出</div><div class="line">1073741824字节(1.1 GB)已复制，22.3027 秒，48.1 MB/秒</div><div class="line"></div><div class="line"># ll</div><div class="line">总用量 1049604</div><div class="line">-rw-r--r-- 1 root root 1073741824 3月  18 00:42 swapfile</div></pre></td></tr></table></figure>
<p>把生成的文件转换成 Swap 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkswap swapfile</div><div class="line"></div><div class="line">正在设置交换空间版本 1，大小 = 1048572 KiB</div><div class="line">无标签，UUID=8f7c8bbc-dcc3-4dac-a5c3-4864cf0fe738</div></pre></td></tr></table></figure>
<p>激活swap文件(出现权限报错不用管)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># swapon swapfile</div><div class="line"></div><div class="line">swapon: /tmp/swap：不安全的权限 0644，建议使用 0600</div></pre></td></tr></table></figure>
<p>查看swap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># swapon -s</div><div class="line"></div><div class="line">文件名             类型      大小  已用  权限</div><div class="line">/tmp/swap        file    1048572 0   -1</div></pre></td></tr></table></figure>
<p>修改/etc/fstab文件，在最后添加下面代码, 设置swap分区为开机自动挂载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vi /etc/fstab</div><div class="line"></div><div class="line">/swap/swapfile none swap sw 0 0</div></pre></td></tr></table></figure>
<h3 id="相关辅助命令"><a href="#相关辅助命令" class="headerlink" title="相关辅助命令"></a>相关辅助命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># free -m //查看内存占用</div><div class="line"># more /proc/meminfo  //查看内存详细</div><div class="line"># dmidecode|grep -P &apos;Maximum\s+Capacity&apos;  //查看最大支持内存数</div><div class="line"></div><div class="line"># du -hs /usr  //查看指定文件夹的大小</div><div class="line"># du -h ftp   //查看指定文件夹下所有文件大小（包括子文件夹）</div><div class="line"># df -h    //以磁盘分区为单位查看文件系统大小</div></pre></td></tr></table></figure>
<p>相关链接:</p>
<ul>
<li><a href="http://jinbitou.net/2017/01/07/2334.html" target="_blank" rel="external">Ubuntu 16.04扩展swap分区</a></li>
<li><a href="https://bbs.aliyun.com/read/167095.html" target="_blank" rel="external">关于swap的问题，请用户务必重视！</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx vs Apache]]></title>
      <url>https://xiie.github.io/2017/03/Nginx-vs-Apache/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>两大web服务器对垒</p>
</blockquote>
<a id="more"></a>
<h2 id="Nginx-的优势"><a href="#Nginx-的优势" class="headerlink" title="Nginx 的优势"></a>Nginx 的优势</h2><ol>
<li><p>轻量级，同样起web服务，比apache 占用更少的内存及资源</p>
</li>
<li><p>抗并发，nginx处理请求是异步非阻塞的; 而apache则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能</p>
</li>
<li><p>高度模块化的设计，编写模块相对简单</p>
</li>
<li><p>社区活跃，各种高性能模块出品迅速</p>
</li>
<li><p>安装非常的简单 , 配置文件非常简洁（还能够支持perl语法）；nginx改完配置能-t测试一下配置有没有问题，apache重启的时候发现配置出错了，会很崩溃</p>
</li>
<li><p>Nginx 静态处理性能比 Apache 高 3倍以上</p>
</li>
<li><p>apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程</p>
</li>
<li><p>Nginx本身就是一个反向代理服务器; 支持7层负载均衡</p>
</li>
</ol>
<h2 id="Apache-的优势"><a href="#Apache-的优势" class="headerlink" title="Apache 的优势"></a>Apache 的优势</h2><ol>
<li><p>重写模块rewrite比nginx强大</p>
</li>
<li><p>出现时间较长，稳定，文档丰富，模块超多，基本只要你能想到的，就有人开发过; 所以Apache的组件比Nginx多</p>
</li>
<li><p>70%的web服务器市场占有率</p>
</li>
<li><p>bug少 ，nginx的bug相对较多； 超级稳定</p>
</li>
<li><p>Apache对PHP支持很好，Nginx需要配合其他后端用; 在处理动态请求上有优势</p>
</li>
<li><p>nginx处理动态请求是鸡肋，一般动态请求要apache去做，nginx只适合静态和反向</p>
</li>
</ol>
<h2 id="两者的取舍"><a href="#两者的取舍" class="headerlink" title="两者的取舍"></a>两者的取舍</h2><ol>
<li><p>一般来说，需要性能的web服务，用nginx ; 如果不需要性能只求稳定，那就apache</p>
</li>
<li><p>如果需要大量用到重写模块，建议选用Apache</p>
</li>
<li><p>系统资源有限，但是自身技术很强大，建议用nginx，因为nginx对系统资源暂用极小，同资源下比Apache高了差不多10倍之多</p>
</li>
</ol>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>结合两个web服务器各自的优点，我们可以使用nginx处理静态文件和做负载反向代理，apache负责处理php动态页面，通过简单的配置实现动静分离。</p>
<p>由于apache处理静态页面的效率不高，而一般网站大多数的内容都是静态文件（如图片、html、css、js等），经过nginx前端的反向代理加速和过滤，后端apache处理请求的压力便可大大减少，只需负责处理动态内容就可以了。在性能与稳定性的权衡下，使用nginx+apache搭配便可让它们在各自擅长的领域大展拳脚。</p>
<p>再配合nginx的lua模块，可以更高效的分担后端动态脚本的处理压力。后面博文中会提到淘宝工程师开发的openresty，一款嵌入lua的nginx服务器，敬请期待 ：）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 终端用户管理]]></title>
      <url>https://xiie.github.io/2017/01/Linux-users-management/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>公司年终奖发了台surface pro4, 好开心 ：）  从此我的linux需要管理mac os 和 windows 终端用户了</p>
</blockquote>
<a id="more"></a>
<h2 id="Linux查看和剔除当前登陆用户"><a href="#Linux查看和剔除当前登陆用户" class="headerlink" title="Linux查看和剔除当前登陆用户"></a>Linux查看和剔除当前登陆用户</h2><h3 id="查看登陆用户列表"><a href="#查看登陆用户列表" class="headerlink" title="查看登陆用户列表"></a>查看登陆用户列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@xiie-aliyun ~]# who</div><div class="line">root     pts/0        2017-01-22 23:40 (113.57.48.91)</div><div class="line">root     pts/1        2017-01-22 23:40 (113.57.48.91)</div></pre></td></tr></table></figure>
<h3 id="查看登陆用户行为"><a href="#查看登陆用户行为" class="headerlink" title="查看登陆用户行为"></a>查看登陆用户行为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@xiie-aliyun ~]# w [要具体查看的用户名]</div><div class="line"> 23:43:50 up 32 min,  2 users,  load average: 0.00, 0.01, 0.03</div><div class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</div><div class="line">root     pts/0    113.57.48.91     23:40    6.00s  0.00s  0.00s w</div><div class="line">root     pts/1    113.57.48.91     23:40   38.00s  0.01s  0.01s -bash</div></pre></td></tr></table></figure>
<h3 id="查看登陆用户历史"><a href="#查看登陆用户历史" class="headerlink" title="查看登陆用户历史"></a>查看登陆用户历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@xiie-aliyun ~]# last [要具体查看的用户名]</div><div class="line">root     pts/1        113.57.48.91     Sun Jan 22 23:40   still logged in</div><div class="line">root     pts/0        113.57.48.91     Sun Jan 22 23:40   still logged in</div><div class="line">root     pts/0        113.57.48.91     Sun Jan 22 23:24 - 23:40  (00:16)</div><div class="line">root     pts/1        113.57.48.91     Sun Jan 22 23:13 - 23:30  (00:16)</div><div class="line">root     pts/0        113.57.48.91     Sun Jan 22 23:12 - 23:23  (00:11)</div><div class="line">reboot   system boot  3.10.0-327.36.3. Mon Jan 23 07:11 - 23:46  (-7:-25)</div><div class="line">root     pts/0        180.90.18.47     Thu Jan  5 23:04 - 02:05  (03:01)</div><div class="line">root     pts/0        180.90.18.47     Thu Jan  5 22:42 - 22:57  (00:14)</div><div class="line">root     pts/0        180.90.18.47     Wed Jan  4 22:44 - 22:44  (00:00)</div><div class="line">root     pts/0        49.211.77.178    Tue Dec 27 22:03 - 01:49  (03:45)</div><div class="line">root     pts/1        49.211.77.178    Mon Dec 26 22:48 - 23:44  (00:56)</div><div class="line">root     pts/0        49.211.77.178    Mon Dec 26 22:39 - 23:44  (01:05)</div></pre></td></tr></table></figure>
<h3 id="安全剔除用户"><a href="#安全剔除用户" class="headerlink" title="安全剔除用户"></a>安全剔除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@xiie-aliyun ~]# ps -ef | grep pts/0</div><div class="line">[root@xiie-aliyun ~]# kill -9 pid</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node 工具包]]></title>
      <url>https://xiie.github.io/2016/11/node-tool-packages/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>一些node项目运行的常用工具管理包</p>
</blockquote>
<a id="more"></a>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>以往我们在开发php程序调试的时候,每修改一次,可以直接去浏览器浏览，不需要重启服务。但是在开发nodejs程序，调试的时候，无论你修改了代码的哪一部分，都需要重启服务才能生效。这是因为 Node.js 只有在第一次引用到某部份时才会去解析脚本文件，以后都会直接访问内存，避免重复载入。。Node.js的这种设计虽然有利于提高性能，却不利于开发调试，因为我们在开发过程中总是希望修改后立即看到效果，而不是每次都要终止进程并重启。supervisor 可以帮助你实现这个功能，它会监视你对代码的改动，并自动重启 Node.js</p>
<p><a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 安装</div><div class="line"># npm -g install supervisor</div><div class="line"></div><div class="line">// 查看全局已安装的包</div><div class="line"># npm list -g --depth 0</div></pre></td></tr></table></figure>
<h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><p>如果说supervisor更倾向于项目前期开发调试时使用,那么pm2则是更专业级处理产品模式的管理工具了.</p>
<p>pm2实现了node.js的cluster模块, 可以实现负载均衡效果, 而且号称“零宕机”</p>
<p><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//安装</div><div class="line"># npm install pm2 -g</div><div class="line"></div><div class="line">//开启多线程</div><div class="line"># pm2 start server.js -i 4</div></pre></td></tr></table></figure>
<p><img src="http://oeqjkf4st.bkt.clouddn.com/pm2_001.png" alt="pm2启动"></p>
<p>常用一些命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># General</div><div class="line">$ npm install pm2 -g            # Install PM2</div><div class="line">$ pm2 start app.js              # Start, Daemonize and auto-restart application (Node)</div><div class="line">$ pm2 start app.py              # Start, Daemonize and auto-restart application (Python)</div><div class="line">$ pm2 start npm -- start        # Start, Daemonize and auto-restart Node application</div><div class="line"></div><div class="line"># Cluster Mode (Node.js only)</div><div class="line">$ pm2 start app.js -i 4         # Start 4 instances of application in cluster mode</div><div class="line">                                # it will load balance network queries to each app</div><div class="line">$ pm2 reload all                # Zero Second Downtime Reload</div><div class="line">$ pm2 scale [app-name] 10       # Scale Cluster app to 10 process</div><div class="line"></div><div class="line"># Process Monitoring</div><div class="line">$ pm2 list                      # List all processes started with PM2</div><div class="line">$ pm2 monit                     # Display memory and cpu usage of each app</div><div class="line">$ pm2 show [app-name]           # Show all informations about application</div><div class="line"></div><div class="line"># Log management</div><div class="line">$ pm2 logs                      # Display logs of all apps</div><div class="line">$ pm2 logs [app-name]           # Display logs for a specific app</div><div class="line">$ pm2 logs --json               # Logs in JSON format</div><div class="line">$ pm2 flush</div><div class="line">$ pm2 reloadLogs</div><div class="line"></div><div class="line"># Process State Management</div><div class="line">$ pm2 start app.js --name=&quot;api&quot; # Start application and name it &quot;api&quot;</div><div class="line">$ pm2 start app.js -- -a 34     # Start app and pass option &quot;-a 34&quot; as argument</div><div class="line">$ pm2 start app.js --watch      # Restart application on file change</div><div class="line">$ pm2 start script.sh           # Start bash script</div><div class="line">$ pm2 start app.json            # Start all applications declared in app.json</div><div class="line">$ pm2 reset [app-name]          # Reset all counbters</div><div class="line">$ pm2 stop all                  # Stop all apps</div><div class="line">$ pm2 stop 0                    # Stop process with id 0</div><div class="line">$ pm2 restart all               # Restart all apps</div><div class="line">$ pm2 gracefulReload all        # Graceful reload all apps in cluster mode</div><div class="line">$ pm2 delete all                # Kill and delete all apps</div><div class="line">$ pm2 delete 0                  # Delete app with id 0</div><div class="line"></div><div class="line"># Startup/Boot management</div><div class="line">$ pm2 startup                   # Generate a startup script to respawn PM2 on boot</div><div class="line">$ pm2 save                      # Save current process list</div><div class="line">$ pm2 resurrect                 # Restore previously save processes</div><div class="line">$ pm2 update                    # Save processes, kill PM2 and restore processes</div><div class="line">$ pm2 generate                  # Generate a sample json configuration file</div><div class="line"></div><div class="line"># Deployment</div><div class="line">$ pm2 deploy app.json prod setup    # Setup &quot;prod&quot; remote server</div><div class="line">$ pm2 deploy app.json prod          # Update &quot;prod&quot; remote server</div><div class="line">$ pm2 deploy app.json prod revert 2 # Revert &quot;prod&quot; remote server by 2</div><div class="line"></div><div class="line"># Module system</div><div class="line">$ pm2 module:generate [name]    # Generate sample module with name [name]</div><div class="line">$ pm2 install pm2-logrotate     # Install module (here a log rotation system)</div><div class="line">$ pm2 uninstall pm2-logrotate   # Uninstall module</div><div class="line">$ pm2 publish                   # Increment version, git push and npm publish</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs api demo based on restify and mongoose]]></title>
      <url>https://xiie.github.io/2016/11/nodejs-api-based-on-restify-and-mongoose/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>一个基于nodejs restify 和 mongoose 的 api demo</p>
</blockquote>
<a id="more"></a>
<p>目录结构</p>
<p><img src="http://oeqjkf4st.bkt.clouddn.com/restify001.png" alt="目录结构"></p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./app/core/mongoose'</span>)</div><div class="line"><span class="built_in">require</span>(<span class="string">'./app/core/router'</span>)</div></pre></td></tr></table></figure></p>
<p>app/core/config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// restify server</span></div><div class="line">exports.server = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"restify-api demo"</span>,</div><div class="line">    <span class="attr">host</span> : <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">port</span> : <span class="number">3000</span>,</div><div class="line">    <span class="attr">debug</span> : <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// mongodb</span></div><div class="line">exports.mongodb = &#123;</div><div class="line">    <span class="attr">host</span> : <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">port</span> : <span class="number">27017</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app/core/mongoose.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cnf = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line">    , fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line">    , models_path = process.cwd() + <span class="string">'/app/models'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> mongodb_url =  <span class="string">'mongodb://'</span> + cnf.mongodb.host + <span class="string">":"</span> + cnf.mongodb.port + <span class="string">'/demo'</span>;</div><div class="line"></div><div class="line">mongoose.connect(mongodb_url, &#123;<span class="attr">server</span>:&#123;<span class="attr">auto_reconnect</span>:<span class="literal">true</span>&#125;&#125;);</div><div class="line"><span class="keyword">var</span> db = mongoose.connection;</div><div class="line"></div><div class="line">db.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'MongoDB connection error:'</span>, err);</div><div class="line">&#125;);</div><div class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">'MongoDB connection is established'</span>);</div><div class="line">&#125;);</div><div class="line">db.on(<span class="string">'disconnected'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'MongoDB disconnected!'</span>);</div><div class="line">    mongoose.connect(mongodb_url, &#123;<span class="attr">server</span>:&#123;<span class="attr">auto_reconnect</span>:<span class="literal">true</span>&#125;&#125;);</div><div class="line">&#125;);</div><div class="line">db.on(<span class="string">'reconnected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">'MongoDB reconnected!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fs.readdirSync(models_path).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (~file.indexOf(<span class="string">'.js'</span>))</div><div class="line">        <span class="built_in">require</span>(models_path + <span class="string">'/'</span> + file)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>app/core/route.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cnf = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</div><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> controllers = &#123;&#125;</div><div class="line">    , controllers_path = process.cwd() + <span class="string">'/app/controllers'</span></div><div class="line">fs.readdirSync(controllers_path).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (file.indexOf(<span class="string">'.js'</span>) != <span class="number">-1</span>) &#123;</div><div class="line">        controllers[file.split(<span class="string">'.'</span>)[<span class="number">0</span>]] = <span class="built_in">require</span>(controllers_path + <span class="string">'/'</span> + file)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = restify.createServer(&#123;</div><div class="line">    <span class="attr">name</span>: cnf.server.name</div><div class="line">&#125;);</div><div class="line">server.use(restify.fullResponse());</div><div class="line">server.use(restify.bodyParser())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bind routes start</span></div><div class="line">server.get(<span class="string">"/user"</span>, controllers.user.userlist)</div><div class="line"><span class="comment">// bind routes end</span></div><div class="line"></div><div class="line"></div><div class="line">server.listen(cnf.server.port, cnf.server.host, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err)</div><div class="line">        <span class="built_in">console</span>.error(err)</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'%s listening at %s '</span>, server.name , server.url);</div><div class="line">&#125;)</div><div class="line"><span class="keyword">if</span> (cnf.server.debug == <span class="literal">false</span>)&#123;</div><div class="line">    process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(err, [<span class="string">'stack'</span>, <span class="string">'message'</span>, <span class="string">'inner'</span>], <span class="number">2</span>)))</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app/controllers/user.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</div><div class="line"></div><div class="line">userinfo = mongoose.model(<span class="string">"userinfo"</span>)</div><div class="line">ObjectId = mongoose.Types.ObjectId</div><div class="line"></div><div class="line">exports.userlist = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    userinfo.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, User</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            res.status(<span class="number">500</span>);</div><div class="line">            res.json(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">data</span>: <span class="string">"Error occured: "</span> + err</div><div class="line">            &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (User) &#123;</div><div class="line">                res.json(&#123;</div><div class="line">                    <span class="attr">type</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">data</span>: User</div><div class="line">                &#125;)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                res.json(&#123;</div><div class="line">                    <span class="attr">type</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">data</span>: <span class="string">"user list not found"</span></div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app/models/userinfo.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div><div class="line"><span class="keyword">var</span> Schema   = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> userinfoSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">age</span>: <span class="built_in">Number</span></div><div class="line">&#125;);</div><div class="line">mongoose.model(<span class="string">'userinfo'</span>, userinfoSchema);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[restify 中文手册]]></title>
      <url>https://xiie.github.io/2016/10/restify-chinese-manual/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>restify 是一款相对于express更专注于RESTful API 的nodejs框架</p>
</blockquote>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install restify</div></pre></td></tr></table></figure>
<h2 id="服务端-API"><a href="#服务端-API" class="headerlink" title="服务端 API"></a>服务端 API</h2><p>最简单的一个服务端脚步<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'hello '</span> + req.params.name);</div><div class="line">    next();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = restify.createServer();</div><div class="line">server.get(<span class="string">'/hello/:name'</span>, respond);</div><div class="line">server.head(<span class="string">'/hello/:name'</span>, respond);</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s listening at %s'</span>, server.name, server.url);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>一睹为快, 使用curl命令在shell中访问restify服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -is http://localhost:3000/hello/mark -H &apos;accept: text/plain&apos;</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/plain</div><div class="line">Content-Length: 10</div><div class="line">Date: Wed, 26 Oct 2016 13:51:08 GMT</div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">hello mark</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -is http://localhost:3000/hello/mark</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Content-Length: 12</div><div class="line">Date: Wed, 26 Oct 2016 13:54:03 GMT</div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">&quot;hello mark&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -is http://localhost:3000/hello/mark -X HEAD -H &apos;connection: close&apos;</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Content-Length: 12</div><div class="line">Date: Wed, 26 Oct 2016 13:56:26 GMT</div><div class="line">Connection: close</div></pre></td></tr></table></figure>
<p>restify 能根据客户端请求返回对应格式信息, 默认返回json. 还能自由实现Connection类型.<br>因为REST APIs中经常使用curl, 所以restify中自带了一个插件可以检测客户端是否是curl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.pre(restify.pre.userAgentConnection());</div></pre></td></tr></table></figure>
<h3 id="创建一个服务器"><a href="#创建一个服务器" class="headerlink" title="创建一个服务器"></a>创建一个服务器</h3><p>直接调用createServer方法就可以创建一个服务器; 可选的参数配置与node原生的http.Server.listen一致<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>),</div><div class="line">fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = restify.createServer(&#123;</div><div class="line">    <span class="attr">certificate</span>: fs.readFileSync(<span class="string">'path/to/server/certificate'</span>),</div><div class="line">    <span class="attr">key</span>: fs.readFileSync(<span class="string">'path/to/server/key'</span>),</div><div class="line">    <span class="attr">name</span>: <span class="string">'MyApp'</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<ul>
<li>certificate: string, HTTPS服务器的证书</li>
<li>key: string, HTTPS服务器的证书key</li>
<li>formatters: object, 自定义的response的content-type</li>
<li>log: object, 服务器日志，可以配合bunyan一起使用</li>
<li>name: string, 服务器的response header</li>
<li>spdy: Object, 允许集成node-spdy服务器</li>
<li>version: string, 路由版本</li>
<li>responseTimeHeader: string, X-Response-Time</li>
<li>responseTimeFormatter: function, 格式化header的值</li>
</ul>
<h3 id="注册handler-server-use"><a href="#注册handler-server-use" class="headerlink" title="注册handler : server.use()"></a>注册handler : server.use()</h3><p>注册服务器控制组件，按照代码顺序执行，需要放在路由代码之前。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">server.use(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    count++;</div><div class="line">    <span class="built_in">console</span>.log(count);</div><div class="line">    next();<span class="comment">// 进入下一个组件 或 下一个相同路由方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>restify的路由基本与express/sinatra相同.<br>经过URL-decoded解码的数据会存放在req.params中以供使用.<br>路由支持正则匹配.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'hello '</span> + req.params.name);</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;</div><div class="line"></div><div class="line">server.post(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="number">201</span>, <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>, <span class="number">8</span>));</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;);</div><div class="line">server.put(<span class="string">'/hello'</span>, send);</div><div class="line">server.get(<span class="string">'/hello/:name'</span>, send);</div><div class="line">server.head(<span class="string">'/hello/:name'</span>, send);</div><div class="line">server.del(<span class="string">'hello/:name'</span>, <span class="function"><span class="keyword">function</span> <span class="title">rm</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="number">204</span>);</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(<span class="regexp">/^\/([a-zA-Z0-9_\.~-]+)\/(.*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(req.params[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">console</span>.log(req.params[<span class="number">1</span>]);</div><div class="line">    res.send(<span class="number">200</span>);</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>你可以在next()中传递一个字符串, 去匹配执行链中的下一个路由</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</div><div class="line"><span class="keyword">var</span> server = restify.createServer();</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'hello '</span> + req.params.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">server.use(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    count++;</div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(<span class="string">'/foo/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">   next(<span class="string">'foo2'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'foo2'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/hello/:name'</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">   assert.equal(count, <span class="number">1</span>);</div><div class="line">   res.send(<span class="number">200</span>);</div><div class="line">   next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(<span class="string">'/hello/:name'</span>,send);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s listening at %s'</span>, server.name, server.url);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上例中的foo2只会被执行一次, 这里需要注意的是:</p>
<ul>
<li>如果next()中传递的name在下游找不到, restify将会返回一个500</li>
<li>不能循环使用这种传递</li>
<li>最后, 使用next(‘foo2’)唤起的路由不能重复注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server.get(<span class="string">'/foo/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">   next(<span class="string">'foo2'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'foo2'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/hello/:name'</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">   assert.equal(count, <span class="number">1</span>);</div><div class="line">   res.send(<span class="number">200</span>);</div><div class="line">   next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(<span class="string">'/hello/:name'</span>,send);<span class="comment">//这个路由将无法匹配上</span></div></pre></td></tr></table></figure>
<p>链式组件: restify的路由机制可以接受多个组件调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server.get(</div><div class="line">    <span class="string">'/foo/:id'</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Authenticate'</span>);</div><div class="line">        <span class="keyword">return</span> next();</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">        res.send(<span class="number">200</span>);</div><div class="line">        <span class="keyword">return</span> next();</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>如果用字符串定义了一个参数化的路由，你可以在程序的其他地方将其解析出来，这将非常有助于定位程序内的路由资源；而不需要你手动拼接准确的地址，还需要去进行适当的URL编码.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server.get(&#123;<span class="attr">name</span>: <span class="string">'city'</span>, <span class="attr">path</span>: <span class="string">'/cities/:slug'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">// in another route</span></div><div class="line">server.get(<span class="string">'/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    res.send(&#123;</div><div class="line">        <span class="attr">country</span>: <span class="string">'Australia'</span>,</div><div class="line">        <span class="comment">// render a URL by specifying the route name and parameters</span></div><div class="line">        capital: server.router.render(<span class="string">'city'</span>, &#123;<span class="attr">slug</span>: <span class="string">'canberra'</span>&#125;, &#123;<span class="attr">details</span>: <span class="literal">true</span>&#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>得到的结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    country: &quot;Australia&quot;,</div><div class="line">    capital: &quot;/cities/canberra?details=true&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>带有版本控制的路由: 大多数的REST APIs都应带有版本控制，restify返回的header Accept-Version中就恰好附带着类似semver的版本信息, 使用了与NPM一样的方式实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = restify.createServer();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendV1</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'hello: '</span> + req.params.name);</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendV2</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">hello</span>: req.params.name&#125;);</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> PATH = <span class="string">'/hello/:name'</span>;</div><div class="line">server.get(&#123;<span class="attr">path</span>: PATH, <span class="attr">version</span>: <span class="string">'1.1.3'</span>&#125;, sendV1);</div><div class="line">server.get(&#123;<span class="attr">path</span>: PATH, <span class="attr">version</span>: <span class="string">'2.0.0'</span>&#125;, sendV2);</div><div class="line"></div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<p>使用curl访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ curl -s localhost:8080/hello/mark</div><div class="line">&quot;hello: mark&quot;</div><div class="line"></div><div class="line">$ curl -s -H &apos;accept-version: ~1&apos; localhost:8080/hello/mark</div><div class="line">&quot;hello: mark&quot;</div><div class="line"></div><div class="line">$ curl -s -H &apos;accept-version: ~2&apos; localhost:8080/hello/mark</div><div class="line">&#123;&quot;hello&quot;:&quot;mark&quot;&#125;</div><div class="line"></div><div class="line">$ curl -s -H &apos;accept-version: ~3&apos; localhost:8080/hello/mark | json</div><div class="line">&#123;</div><div class="line">    &quot;code&quot;: &quot;InvalidVersion&quot;,</div><div class="line">    &quot;message&quot;: &quot;GET /hello/mark supports versions: 1.1.3, 2.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然你也可以同一个接口指定多个版本信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.get(&#123;<span class="attr">path</span>: PATH, <span class="attr">version</span>: [<span class="string">'2.0.0'</span>, <span class="string">'2.1.0'</span>, <span class="string">'2.2.0'</span>]&#125;, sendV2);</div></pre></td></tr></table></figure></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>restify中有一些处理错误的方法. 首先，你可以仅仅简单调用res.send(err). 当然你也可以像这样将错误信息暂存进路由中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> database.get(req.params.name, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</div><div class="line"></div><div class="line">        res.send(user);</div><div class="line">        <span class="keyword">return</span> next();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果你调用res.send()时遇到了错误，一般会带有一个statusCode信息，再要么直接报500(除非此时你显式的使用 res.send(4xx, new Error(‘blah’)); ).</p>
<p>另外的，restify2.1提供了next.ifError API</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> database.get(req.params.name, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</div><div class="line">        next.ifError(err);</div><div class="line"></div><div class="line">        res.send(user);</div><div class="line">        next();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>有时，你想使用一种通用的错误处理机制对付所有的请求异常；就可以像这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// some internal unrecoverable error</span></div><div class="line">    <span class="keyword">var</span> err = <span class="keyword">new</span> restify.errors.InternalServerError(<span class="string">'oh noes!'</span>);</div><div class="line">    <span class="keyword">return</span> next(err);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.on(<span class="string">'InternalServer'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, err, cb</span>) </span>&#123;</div><div class="line">    err.body = <span class="string">'something is wrong!'</span>;</div><div class="line">    <span class="keyword">return</span> cb();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>自定义的错误处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> restify = <span class="built_in">require</span>(<span class="string">'restify'</span>);</div><div class="line"><span class="keyword">var</span> server = restify.createServer();</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">    restify.RestError.call(<span class="keyword">this</span>, &#123;</div><div class="line">        <span class="attr">restCode</span>: <span class="string">'MyError'</span>,</div><div class="line">        <span class="attr">statusCode</span>: <span class="number">418</span>,</div><div class="line">        <span class="attr">message</span>: message,</div><div class="line">        <span class="attr">constructorOpt</span>: MyError</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'MyError'</span>;</div><div class="line">&#125;;</div><div class="line">util.inherits(MyError, restify.RestError);</div><div class="line"></div><div class="line">server.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> next(<span class="keyword">new</span> MyError(<span class="string">'here occur an error'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s listening at %s'</span>, server.name, server.url);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="node-服务端-API"><a href="#node-服务端-API" class="headerlink" title="node 服务端 API"></a>node 服务端 API</h3><p>事件：restify服务器除了会发送所有的node原生http.Server中事件，还会发送一些你可能需要用到的其他事件。</p>
<p>res() : 允许你在路由前添加组件；如果你愿意的话，可以像只钩子(hook)一样改变请求头信息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server.pre(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    req.headers.accept = <span class="string">'application/json'</span>;  <span class="comment">// screw you client!</span></div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>run() : 无论路由如何，都可以添加组件。</p>
<h3 id="已经绑定的插件"><a href="#已经绑定的插件" class="headerlink" title="已经绑定的插件"></a>已经绑定的插件</h3><ul>
<li>解析Accept头部: 注册restify服务时传递参数进行配置即可</li>
<li>解析授权Authorization头部: 目前只支持基础的http授权和认证</li>
<li>跨域处理</li>
<li>解析日期: 可以调整时钟偏移</li>
<li>解析请求字符串</li>
<li>支持JSONP</li>
<li>解析body: JSON/URL-encoded/multipart form</li>
<li>请求日志: 使用了轻量的bunyan日志框架(出于性能考虑，默认只记录所有请求id信息)</li>
<li>Gzip响应: 只有客户端请求accept-encoding: gzip时才会奏效</li>
<li>静态资源: 支持http缓存机制</li>
<li>节流</li>
<li>Request Expiry</li>
<li>审计日志(详细的记录输入和输出): 这个蛮特殊的，不是使用use()调用，而是在after事件中触发.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = restify.createServer();</div><div class="line"></div><div class="line">server.use(restify.acceptParser(server.acceptable));</div><div class="line"></div><div class="line">server.use(restify.authorizationParser());</div><div class="line"></div><div class="line">server.use(restify.CORS(&#123;</div><div class="line">    <span class="attr">origins</span>: [<span class="string">'https://foo.com'</span>, <span class="string">'http://bar.com'</span>, <span class="string">'http://baz.com:8081'</span>], <span class="comment">// defaults to ['*']</span></div><div class="line">    credentials: <span class="literal">true</span>, <span class="comment">// defaults to false</span></div><div class="line">    headers: [<span class="string">'x-foo'</span>] <span class="comment">// sets expose-headers</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">server.use(restify.dateParser(<span class="number">60</span>));</div><div class="line"></div><div class="line">server.use(restify.queryParser());</div><div class="line"></div><div class="line">server.use(restify.jsonp());</div><div class="line"></div><div class="line">server.use(restify.gzipResponse());</div><div class="line"></div><div class="line">server.use(restify.bodyParser(&#123;</div><div class="line">    <span class="attr">maxBodySize</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">mapParams</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">mapFiles</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">overrideParams</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">multipartHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">part</span>) </span>&#123;</div><div class="line">        part.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">/* do something with the multipart data */</span></div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">multipartFileHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">part</span>) </span>&#123;</div><div class="line">        part.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">/* do something with the multipart file data */</span></div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">keepExtensions</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">uploadDir</span>: os.tmpdir(),</div><div class="line">    <span class="attr">multiples</span>: <span class="literal">true</span></div><div class="line">    hash: <span class="string">'sha1'</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">server.use(restify.requestLogger(&#123;</div><div class="line">    <span class="attr">properties</span>: &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="string">'bar'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">serializers</span>: &#123;...&#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">server.use(restify.requestExpiry(&#123;</div><div class="line">    <span class="attr">header</span>: <span class="string">'x-request-expiry-time'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.get(<span class="regexp">/\/docs\/current\/?.*/</span>, restify.serveStatic(&#123;</div><div class="line">    <span class="attr">directory</span>: <span class="string">'./documentation/v1'</span>,</div><div class="line">    <span class="attr">default</span>: <span class="string">'index.html'</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">server.use(restify.throttle(&#123;</div><div class="line">    <span class="attr">burst</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">rate</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">ip</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">overrides</span>: &#123;</div><div class="line">        <span class="string">'192.168.1.1'</span>: &#123;</div><div class="line">            <span class="attr">rate</span>: <span class="number">0</span>,<span class="comment">// unlimited</span></div><div class="line">            burst: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">server.use(<span class="function"><span class="keyword">function</span> <span class="title">setETag</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.header(<span class="string">'ETag'</span>, <span class="string">'myETag'</span>);</div><div class="line">    res.header(<span class="string">'Last-Modified'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.use(restify.conditionalRequest());</div><div class="line"></div><div class="line">server.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">'hello '</span> + req.params.name);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.on(<span class="string">'after'</span>, restify.auditLogger(&#123;</div><div class="line">    <span class="attr">log</span>: bunyan.createLogger(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'audit'</span>,</div><div class="line">        <span class="attr">stream</span>: process.stdout</div><div class="line">    &#125;)</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h3 id="请求-API"><a href="#请求-API" class="headerlink" title="请求 API"></a>请求 API</h3><p>打包了所有node http.IncomingMessage APIs，事件和属性；还包括下面的</p>
<ul>
<li>header(key, [defaultValue])</li>
<li>accepts(type)</li>
<li>is(type)</li>
<li>isSecure()</li>
<li>isChunked()</li>
<li>isKeepAlive()</li>
<li>log</li>
<li>getQuery()</li>
<li>time()</li>
<li>startHandlerTimer(handlerName)</li>
<li>endHandlerTimer(handlerName)</li>
</ul>
<h3 id="响应-API"><a href="#响应-API" class="headerlink" title="响应 API"></a>响应 API</h3><p>打包了所有node ServerResponse APIs，事件和属性；还包括下面的</p>
<p>－ header(key, value)<br>－ charSet(type)<br>－ cache([type], [options])<br>－ status(code)<br>－ send([status], body)<br>－ redirect(status, url, next)<br>－ redirect([url | options], next)</p>
<ul>
<li>json([status], body)</li>
</ul>
<h3 id="DTrace"><a href="#DTrace" class="headerlink" title="DTrace"></a>DTrace</h3><p>restify 最酷的一个特性是：当你添加一个新的路由或组件时，将自动为其创建一个 DTrace探针。</p>
<h2 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h2><ul>
<li>JsonClient: sends and expects application/json</li>
<li>StringClient: sends url-encoded request and expects text/plain</li>
<li>HttpClient: thin wrapper over node’s http/https libraries</li>
</ul>
<p>参考链接<br><a href="http://restify.com/" target="_blank" rel="external">restify 官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 闭包]]></title>
      <url>https://xiie.github.io/2016/10/javascript-closure/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>js进阶路上的一道 坎</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>有权访问另一个函数作用域内变量的函数都是闭包.</p>
<h2 id="如何形成闭包"><a href="#如何形成闭包" class="headerlink" title="如何形成闭包"></a>如何形成闭包</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> counter += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">add();<span class="comment">// 1</span></div><div class="line">add();<span class="comment">// 2</span></div><div class="line">add();<span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>上面匿名函数的返回值是个函数, 该函数有权访问上层作用域链的局部变量counter, 然后就形成了闭包.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        n++;</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">    inc();</div><div class="line">    inc();</div><div class="line">&#125;</div><div class="line">a();<span class="comment">//1  2</span></div><div class="line">a();<span class="comment">//1  2</span></div></pre></td></tr></table></figure>
<p>上面函数内的函数inc()有权访问函数a(), 也形成了闭包;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.inc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        n++;</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> b();</div><div class="line">bb.inc();</div><div class="line">bb.inc();</div><div class="line">bb.inc();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        n++; </div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inc;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cc = c();</div><div class="line">cc();</div><div class="line">cc();</div><div class="line">cc();</div></pre></td></tr></table></figure>
<h3 id="循环给DOM元素添加点击事件"><a href="#循环给DOM元素添加点击事件" class="headerlink" title="循环给DOM元素添加点击事件"></a>循环给DOM元素添加点击事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第1条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第2条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第3条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第4条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第5条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>第6条记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buttonst_obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = buttonst_obj.length; i &lt; len; i++) &#123;</div><div class="line">    buttonst_obj[i].onclick = clickEvent(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickEvent</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(i)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><h3 id="匿名自执行函数"><a href="#匿名自执行函数" class="headerlink" title="匿名自执行函数"></a>匿名自执行函数</h3><p>我们知道所有的变量，如果不加上var关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。除了每次使用变量都是用var关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，比如UI的初始化，那么我们可以使用闭包：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> datamodel = &#123;    </div><div class="line">    <span class="attr">table</span> : [],    </div><div class="line">    <span class="attr">tree</span> : &#123;&#125;    </div><div class="line">&#125;;    </div><div class="line">     </div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">dm</span>)</span>&#123;    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dm.table.rows; i++)&#123;    </div><div class="line">       <span class="keyword">var</span> row = dm.table.rows[i];    </div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; row.cells; i++)&#123;    </div><div class="line">            drawCell(i, j);    </div><div class="line">       &#125;    </div><div class="line">    &#125;    </div><div class="line">       </div><div class="line">    <span class="comment">//build dm.tree      </span></div><div class="line">&#125;)(datamodel);</div></pre></td></tr></table></figure>
<p>我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在执行完后很快就会被释放，关键是这种机制不会污染全局对象。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>再来看一个例子，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CachedSearchBox = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;,    </div><div class="line">       count = [];    </div><div class="line">    <span class="keyword">return</span> &#123;    </div><div class="line">       <span class="attr">attachSearchBox</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>)</span>&#123;    </div><div class="line">           <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;<span class="comment">//如果结果在缓存中    </span></div><div class="line">              <span class="keyword">return</span> cache[dsid];<span class="comment">//直接返回缓存中的对象    </span></div><div class="line">           &#125;    </div><div class="line">           <span class="keyword">var</span> fsb = <span class="keyword">new</span> uikit.webctrl.SearchBox(dsid);<span class="comment">//新建    </span></div><div class="line">           cache[dsid] = fsb;<span class="comment">//更新缓存    </span></div><div class="line">           <span class="keyword">if</span>(count.length &gt; <span class="number">100</span>)&#123;<span class="comment">//保正缓存的大小&lt;=100    </span></div><div class="line">              <span class="keyword">delete</span> cache[count.shift()];    </div><div class="line">           &#125;    </div><div class="line">           <span class="keyword">return</span> fsb;          </div><div class="line">       &#125;,    </div><div class="line">     </div><div class="line">       <span class="attr">clearSearchBox</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>)</span>&#123;    </div><div class="line">           <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;    </div><div class="line">              cache[dsid].clearSelection();      </div><div class="line">           &#125;    </div><div class="line">       &#125;    </div><div class="line">    &#125;;    </div><div class="line">&#125;)();    </div><div class="line">     </div><div class="line">CachedSearchBox.attachSearchBox(<span class="string">"input1"</span>);</div></pre></td></tr></table></figure>
<p>这样，当我们第二次调用CachedSearchBox.attachSerachBox(“input1”)的时候，我们就可以从缓存中取道该对象，而不用再去创建一个新的searchbox对象。</p>
<h3 id="实现封装-和-对象化编程"><a href="#实现封装-和-对象化编程" class="headerlink" title="实现封装 和 对象化编程"></a>实现封装 和 对象化编程</h3><p>可以先来看一个关于封装的例子，在person之外的地方无法访问其内部的变量，而通过提供闭包的形式来访问：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="keyword">var</span> name = <span class="string">"default"</span>;       </div><div class="line">       </div><div class="line">    <span class="keyword">return</span> &#123;    </div><div class="line">       <span class="attr">getName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">           <span class="keyword">return</span> name;    </div><div class="line">       &#125;,    </div><div class="line">       <span class="attr">setName</span> : <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;    </div><div class="line">           name = newName;    </div><div class="line">       &#125;    </div><div class="line">    &#125;    </div><div class="line">&#125;;    </div><div class="line">     </div><div class="line">     </div><div class="line"><span class="keyword">var</span> john = Person();    </div><div class="line">print(john.getName());    </div><div class="line">john.setName(<span class="string">"john"</span>);    </div><div class="line">print(john.getName());    </div><div class="line">     </div><div class="line"><span class="keyword">var</span> jack = Person();    </div><div class="line">print(jack.getName());    </div><div class="line">jack.setName(<span class="string">"jack"</span>);    </div><div class="line">print(jack.getName());    </div><div class="line">   </div><div class="line">运行结果如下：  </div><div class="line">   </div><div class="line"><span class="keyword">default</span>  </div><div class="line">john  </div><div class="line"><span class="keyword">default</span>  </div><div class="line">jack</div></pre></td></tr></table></figure>
<p>参考链接:</p>
<ul>
<li><a href="http://blog.csdn.net/sunlylorn/article/details/6534610" target="_blank" rel="external">js闭包的用途</a></li>
<li><a href="http://www.jb51.net/article/83524.htm" target="_blank" rel="external">一分钟理解js闭包</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WEB服务器 压力测试工具]]></title>
      <url>https://xiie.github.io/2016/10/web-stress-test/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>一些好用的web压力测试工具介绍. 看看你的web应用吞吐量和负载, 测试下web服务器性能.</p>
</blockquote>
<a id="more"></a>
<h2 id="http-load"><a href="#http-load" class="headerlink" title="http_load"></a>http_load</h2><p>http_load是基于linux平台的性能测试工具，它体积非常小，仅100KB。它以并行复用的方式运行，可以测试web服务器的吞吐量与负载。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://www.acme.com/software/http_load/" target="_blank" rel="external">官网下载</a><br>解压后只要 make , make install 就行了<br>环境：需要gcc 如果是在服务器上安装的话还需要有sudo. (如果是mac os 需要事先安装xcode)</p>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http_load -p 30 -s 30 urllist.txt</div></pre></td></tr></table></figure>
<p>参数说明:</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">全称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-p</td>
<td style="text-align:center">-parallel</td>
<td style="text-align:center">并发的用户进程数</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:center">-fetches</td>
<td style="text-align:center">总计的访问次数</td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">-rate</td>
<td style="text-align:center">含义是每秒的访问频率</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">-seconds</td>
<td style="text-align:center">连续的访问时间</td>
</tr>
</tbody>
</table>
<p>urllist.txt，文件格式是每行一个URL，URL最好超过50－100个测试效果比较好.</p>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p><img src="http://oeqjkf4st.bkt.clouddn.com/web_stress_test01.png" alt="截图"></p>
<ul>
<li>运行了1628个请求，最大的并发进程数是30，总计传输的数据是64748800bytes，运行的时间是30.0001秒</li>
<li>每一连接平均传输的数据量 39772 bytes</li>
<li>每秒的响应请求为54.2664，每秒传递的数据为2158280 bytes</li>
<li>每连接的平均响应时间是82.7073 msecs，最大的响应时间2527.8 msecs，最小的响应时间16.929 msecs</li>
<li>首次响应的平均时间是61.4183 msecs，最大时间1747.5 msecs，最小时间18.577 msecs</li>
<li>HTTP 状态200的有 1628个</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go HTTP 小结]]></title>
      <url>https://xiie.github.io/2016/10/Go-HTTP-Summary/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>可能是史上最全的golang实现HTTP客户端的总结了,再附上一个变态的的服务器代码</p>
</blockquote>
<a id="more"></a>
<p>以下脚本总共创建了6个函数:用三种方法实现了http请求,和一个服务器监听.</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"net/url"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    uri := <span class="string">"http://localhost:8089/?hello=world"</span></div><div class="line">    mime := <span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">    params := url.Values&#123;<span class="string">"name"</span>: &#123;<span class="string">"xiie"</span>&#125;, <span class="string">"from"</span>: &#123;<span class="string">"wuhan"</span>&#125;&#125;</div><div class="line"></div><div class="line">    get_content := httpGet(uri)</div><div class="line">    client_get := clientGet(uri)</div><div class="line">    post_content := httpPost(uri,mime,params.Encode())</div><div class="line">    client_post := clientPost(uri,mime,params.Encode())</div><div class="line">    form_content := postForm(uri,params)</div><div class="line"></div><div class="line">    fmt.Println(get_content)</div><div class="line">    fmt.Println(client_get)</div><div class="line">    fmt.Println(post_content)</div><div class="line">    fmt.Println(client_post)</div><div class="line">    fmt.Println(form_content)</div><div class="line"></div><div class="line">    <span class="comment">// http_server()</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// net/http包 GET请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpGet</span><span class="params">(uri <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</div><div class="line">    response,_ := http.Get(uri)</div><div class="line">    <span class="keyword">defer</span> response.Body.Close()</div><div class="line">    body,_ := ioutil.ReadAll(response.Body)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(body)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// net/http包 POST请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpPost</span><span class="params">(uri <span class="keyword">string</span>,mime <span class="keyword">string</span>,params <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</div><div class="line">    resp, err := http.Post(uri,mime,strings.NewReader(params))</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="comment">// handle error</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(body)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// net/http client GET请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientGet</span><span class="params">(uri <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</div><div class="line">    client := &amp;http.Client&#123;&#125;</div><div class="line">    reqest, _ := http.NewRequest(<span class="string">"GET"</span>, uri, <span class="literal">nil</span>)</div><div class="line">     </div><div class="line">    reqest.Header.Set(<span class="string">"Accept"</span>,<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)</div><div class="line">    reqest.Header.Set(<span class="string">"Accept-Charset"</span>,<span class="string">"GBK,utf-8;q=0.7,*;q=0.3"</span>)</div><div class="line">    reqest.Header.Set(<span class="string">"Accept-Encoding"</span>,<span class="string">"gzip,deflate,sdch"</span>)</div><div class="line">    reqest.Header.Set(<span class="string">"Accept-Language"</span>,<span class="string">"zh-CN,zh;q=0.8"</span>)</div><div class="line">    reqest.Header.Set(<span class="string">"Cache-Control"</span>,<span class="string">"max-age=0"</span>)</div><div class="line">    reqest.Header.Set(<span class="string">"Connection"</span>,<span class="string">"keep-alive"</span>)</div><div class="line">     </div><div class="line">    response,_ := client.Do(reqest)</div><div class="line">    body, _ := ioutil.ReadAll(response.Body)</div><div class="line">    <span class="keyword">defer</span> response.Body.Close() <span class="comment">//一定要关闭resp.Body</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(body)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// net/http client POST请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientPost</span><span class="params">(uri <span class="keyword">string</span>, mime <span class="keyword">string</span>, params <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</div><div class="line">    client := &amp;http.Client&#123;&#125;</div><div class="line">    req, _ := http.NewRequest(<span class="string">"POST"</span>, uri, strings.NewReader(params))</div><div class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, mime)</div><div class="line"></div><div class="line">    resp, _ := client.Do(req)</div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    data, _ := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(data)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// net/http PostForm POST请求</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">postForm</span><span class="params">(uri <span class="keyword">string</span>,params url.Values)</span> <span class="title">string</span></span>&#123;</div><div class="line">    resp, err := http.PostForm(<span class="string">"http://www.01happy.com/demo/accept.php"</span>,params)</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="comment">// handle error</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="comment">// handle error</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(body)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HTTP server</span></div><div class="line"><span class="comment">// golang服务端的效率没有node.js高,几乎是它的一半.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">http_server</span><span class="params">()</span></span>&#123;</div><div class="line">    http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>&#123;<span class="comment">//匿名函数</span></div><div class="line">        w.Write([]<span class="keyword">byte</span>(<span class="string">"Hello,philo xiie"</span>))</div><div class="line">    &#125;)</div><div class="line">    http.ListenAndServe(<span class="string">":8088"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs HTTP简易服务器和请求]]></title>
      <url>https://xiie.github.io/2016/10/nodejs-HTTP-Server-And-Request/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>nodejs 一个出场自带低音炮的网络应用语言</p>
</blockquote>
<a id="more"></a>
<p>有人说：一切能用js实现的, 终将由js实现; 我对这句话深信不疑 ：）</p>
<h2 id="搭建一个简单的WEB服务器，接收GET和POST数据"><a href="#搭建一个简单的WEB服务器，接收GET和POST数据" class="headerlink" title="搭建一个简单的WEB服务器，接收GET和POST数据"></a>搭建一个简单的WEB服务器，接收GET和POST数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);<span class="comment">//提供web服务  </span></div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);<span class="comment">//解析GET请求  </span></div><div class="line"><span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">"querystring"</span>);<span class="comment">//解析POST请求</span></div><div class="line"></div><div class="line"><span class="comment">//服务</span></div><div class="line"><span class="keyword">var</span> server = <span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;  </div><div class="line">    <span class="comment">//定义报文头</span></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>:<span class="string">"text/json"</span>&#125;);</div><div class="line">    <span class="comment">//判断是GET/POST请求</span></div><div class="line">    <span class="keyword">if</span>(request.method == <span class="string">"GET"</span>)&#123;</div><div class="line">        <span class="keyword">var</span> params = [];</div><div class="line">        params = url.parse(request.url,<span class="literal">true</span>).query;</div><div class="line">        response.write(<span class="built_in">JSON</span>.stringify(params));</div><div class="line">        response.end();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">var</span> postdata = <span class="string">""</span>;</div><div class="line">        request.addListener(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">postchunk</span>)</span>&#123;</div><div class="line">            postdata += postchunk;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//POST结束输出结果</span></div><div class="line">        request.addListener(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> params = query.parse(postdata);</div><div class="line">            response.write(<span class="built_in">JSON</span>.stringify(params));</div><div class="line">            response.end();</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//开启服务在127.0.0.1:8080</span></div><div class="line">http.createServer(server).listen(<span class="number">8080</span>);  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Server start!"</span>);</div></pre></td></tr></table></figure>
<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">a</span>:<span class="number">123</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;;<span class="comment">//这是需要提交的数据  </span></div><div class="line"><span class="keyword">var</span> content = qs.stringify(data);  </div><div class="line"><span class="keyword">var</span> options = &#123;  </div><div class="line">    <span class="attr">hostname</span>: <span class="string">'localhost'</span>,  </div><div class="line">    <span class="attr">port</span>: <span class="number">80</span>,  </div><div class="line">    <span class="attr">path</span>: <span class="string">'/tmp.php?'</span> + content,  </div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));  </div><div class="line">    res.setEncoding(<span class="string">'utf8'</span>);  </div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'BODY: '</span> + chunk);  </div><div class="line">    &#125;);  </div><div class="line">&#125;);  </div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);  </div><div class="line">&#125;);  </div><div class="line">req.end();</div></pre></td></tr></table></figure>
<h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);  </div><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);  </div><div class="line"><span class="keyword">var</span> post_data = &#123;<span class="attr">a</span>: <span class="number">456</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;;</div><div class="line"><span class="keyword">var</span> content = qs.stringify(post_data);  </div><div class="line"><span class="keyword">var</span> options = &#123;  </div><div class="line">    <span class="attr">hostname</span>: <span class="string">'localhost'</span>,  </div><div class="line">    <span class="attr">port</span>: <span class="number">80</span>,  </div><div class="line">    <span class="attr">path</span>: <span class="string">'/tmp.php'</span>,  </div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,  </div><div class="line">    <span class="attr">headers</span>: &#123;  </div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));  </div><div class="line">    res.setEncoding(<span class="string">'utf8'</span>);  </div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'BODY: '</span> + chunk);  </div><div class="line">    &#125;);  </div><div class="line">&#125;);  </div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);  </div><div class="line">&#125;);  </div><div class="line"><span class="comment">// write data to request body  </span></div><div class="line">req.write(content);  </div><div class="line">req.end();</div></pre></td></tr></table></figure>
<p>值得注意的是由于POST质量过大，所以不能像GET请求那样直接拿去数据。需要增加监听事件，并且在POST结束前都不能结束应答（response）完成报文流，所以要把输出、结束放到监听结束事件里。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://www.kisshc.com/nodejs-3/" target="_blank" rel="external">Node.js获取GET/POST数据</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5f39af320102wapm.html" target="_blank" rel="external">nodejs http发送get和post请求 </a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP HTTP 请求的几种方式]]></title>
      <url>https://xiie.github.io/2016/10/PHP-HTTP-Request-Methods/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>php函数 file_get_contents,fsockopen,curl,fopen实现的HTTP GET/POST请求.</p>
</blockquote>
<a id="more"></a>
<p>接着上篇的 <a href="https://xiie.github.io/2016/10/HTTP-Brief/">HTTP 简介</a>，直接上php实现代码：</p>
<h2 id="file-get-contents实现POST请求"><a href="#file-get-contents实现POST请求" class="headerlink" title="file_get_contents实现POST请求"></a>file_get_contents实现POST请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$data = <span class="keyword">array</span>(<span class="string">"name"</span> =&gt; <span class="string">'xiie'</span>,<span class="string">"content"</span> =&gt; <span class="string">'test'</span>);</div><div class="line">$data = http_build_query($data);</div><div class="line">$opts = <span class="keyword">array</span>(  </div><div class="line">    <span class="string">'http'</span>=&gt;<span class="keyword">array</span>(  </div><div class="line">    <span class="string">'method'</span>=&gt;<span class="string">"POST"</span>,</div><div class="line">    <span class="string">'timeout'</span>=&gt;<span class="number">60</span>,</div><div class="line">    <span class="string">'header'</span>=&gt;<span class="string">"Content-type: application/x-www-form-urlencoded\r\n"</span>.  </div><div class="line">            <span class="string">"Content-length:"</span>.strlen($data).<span class="string">"\r\n"</span> .   </div><div class="line">            <span class="string">"Cookie: foo=bar\r\n"</span> .   </div><div class="line">            <span class="string">"\r\n"</span>,  </div><div class="line">    <span class="string">'content'</span> =&gt; $data,</div><div class="line">   )</div><div class="line">);  </div><div class="line">$cxContext = stream_context_create($opts);  </div><div class="line">$sFile = file_get_contents(<span class="string">"http://localhost/tmp.php"</span>, <span class="keyword">false</span>, $cxContext);  </div><div class="line"><span class="keyword">echo</span> $sFile;</div></pre></td></tr></table></figure>
<h2 id="file-get-contents实现GET请求-带重试"><a href="#file-get-contents实现GET请求-带重试" class="headerlink" title="file_get_contents实现GET请求(带重试)"></a>file_get_contents实现GET请求(带重试)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cnt=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>($cnt &lt; <span class="number">3</span> &amp;&amp; ($str=@file_get_contents(<span class="string">"http://localhost/tmp.php"</span>))===<span class="keyword">FALSE</span>) $cnt++;</div></pre></td></tr></table></figure>
<h2 id="fopen实现GET请求"><a href="#fopen实现GET请求" class="headerlink" title="fopen实现GET请求"></a>fopen实现GET请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$fp = fopen(<span class="string">"http://www.jb51.net/article/51974.htm"</span>, <span class="string">'r'</span>);</div><div class="line">stream_get_meta_data($fp);</div><div class="line"><span class="keyword">while</span>(!feof($fp)) &#123;</div><div class="line">$result .= fgets($fp, <span class="number">1024</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> $result;</div><div class="line">fclose($fp);</div></pre></td></tr></table></figure>
<h2 id="fsockopen实现GET请求"><a href="#fsockopen实现GET请求" class="headerlink" title="fsockopen实现GET请求"></a>fsockopen实现GET请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sock_get(<span class="string">'http://localhost/tmp.php?name=xiie'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sock_get</span><span class="params">($url)</span></span></div><div class="line">&#123;</div><div class="line">   $info = parse_url($url);</div><div class="line">   $fp = fsockopen($info[<span class="string">"host"</span>], <span class="number">80</span>, $errno, $errstr, <span class="number">3</span>);</div><div class="line">   $head = <span class="string">"GET "</span>.$info[<span class="string">'path'</span>].<span class="string">"?"</span>.$info[<span class="string">"query"</span>].<span class="string">" HTTP/1.0\r\n"</span>;</div><div class="line">   $head .= <span class="string">"Host: "</span>.$info[<span class="string">'host'</span>].<span class="string">"\r\n"</span>;</div><div class="line">   $head .= <span class="string">"\r\n"</span>;</div><div class="line">   $write = fputs($fp, $head);</div><div class="line">   <span class="keyword">while</span> (!feof($fp))</div><div class="line">   &#123;</div><div class="line">        $line = fread($fp,<span class="number">4096</span>);</div><div class="line">        <span class="keyword">echo</span> $line;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="fsockopen实现POST请求"><a href="#fsockopen实现POST请求" class="headerlink" title="fsockopen实现POST请求"></a>fsockopen实现POST请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">sock_post(<span class="string">'http://localhost/tmp.php'</span>,<span class="string">"name=xiie"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sock_post</span><span class="params">($url, $query)</span></span></div><div class="line">&#123;</div><div class="line">   $info = parse_url($url);</div><div class="line">   $fp = fsockopen($info[<span class="string">"host"</span>], <span class="number">80</span>, $errno, $errstr, <span class="number">3</span>);</div><div class="line">   $head = <span class="string">"POST "</span>.$info[<span class="string">'path'</span>].<span class="string">"?"</span>.$info[<span class="string">"query"</span>].<span class="string">" HTTP/1.0\r\n"</span>;</div><div class="line">   $head .= <span class="string">"Host: "</span>.$info[<span class="string">'host'</span>].<span class="string">"\r\n"</span>;</div><div class="line">   $head .= <span class="string">"Referer: http://"</span>.$info[<span class="string">'host'</span>].$info[<span class="string">'path'</span>].<span class="string">"\r\n"</span>;</div><div class="line">   $head .= <span class="string">"Content-type: application/x-www-form-urlencoded\r\n"</span>;</div><div class="line">   $head .= <span class="string">"Content-Length: "</span>.strlen(trim($query)).<span class="string">"\r\n"</span>;</div><div class="line">   $head .= <span class="string">"\r\n"</span>;</div><div class="line">   $head .= trim($query);</div><div class="line">   $write = fputs($fp, $head);</div><div class="line">   <span class="keyword">while</span> (!feof($fp))</div><div class="line">   &#123;</div><div class="line">        $line = fread($fp,<span class="number">4096</span>);</div><div class="line">        <span class="keyword">echo</span> $line;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="curl实现GET请求"><a href="#curl实现GET请求" class="headerlink" title="curl实现GET请求"></a>curl实现GET请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ch = curl_init();</div><div class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.jb51.net"</span>);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line">$output = curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line">print_r($output);</div></pre></td></tr></table></figure>
<h2 id="curl实现POST请求"><a href="#curl实现POST请求" class="headerlink" title="curl实现POST请求"></a>curl实现POST请求</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$url = <span class="string">"http://localhost/tmp.php"</span>;</div><div class="line">$post_data = <span class="keyword">array</span> (<span class="string">"username"</span> =&gt; <span class="string">"bob"</span>,<span class="string">"key"</span> =&gt; <span class="string">"12345"</span>);</div><div class="line">$ch = curl_init();</div><div class="line">curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);</div><div class="line">$output = curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line">print_r($output);</div></pre></td></tr></table></figure>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul>
<li>socket更底层,可以设置基于UDP或是TCP协议去交互; file_get_contents 和 curl 能干的,socket都能干; socket能干的,curl 就不一定能干了.</li>
<li>curl 效率比file_get_contents()和fsockopen()高一些,原因是CURL会自动对DNS信息进行缓存.</li>
<li>fsockopen 返回的是没有处理过的数据,包括数据的长度,数据内容和数据的结束符; file_get_contents 和 curl是处理后的内容.</li>
<li>fsockopen,file_get_contents函数会受到php.ini文件中allow_url_open选项配置的影响.如果该配置关闭了,则该函数也就失效了;而curl不受该配置的影响.</li>
<li>file_get_contents()函数获取https链接内容的时候，需要php 中mod_ssl的支持(或安装opensll).</li>
<li>结论就是,curl 效率及稳定都比 file_get_contents() 要好,fsockopen 也很强大,但是比较偏底层.</li>
</ul>
<p>参考链接:</p>
<ul>
<li><a href="http://www.nowamagic.net/academy/detail/12220248" target="_blank" rel="external">fsockopen/curl/file_get_contents效率比较</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP 简介]]></title>
      <url>https://xiie.github.io/2016/10/HTTP-Brief/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>HTTP（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用.</p>
</blockquote>
<a id="more"></a>
<h2 id="HTTP协议的主要特点"><a href="#HTTP协议的主要特点" class="headerlink" title="HTTP协议的主要特点"></a>HTTP协议的主要特点</h2><ul>
<li>支持客户/服务器模式</li>
<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快</li>
<li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记</li>
<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</li>
<li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li>
</ul>
<h2 id="介绍几个模拟http的工具"><a href="#介绍几个模拟http的工具" class="headerlink" title="介绍几个模拟http的工具"></a>介绍几个模拟http的工具</h2><ul>
<li>windows 下可以使用fiddler</li>
<li>Mac OS X  下可以使用httpie(纯命令行,将逼格进行到底!)</li>
<li>chrome  插件postman (跨系统!! 哈哈)</li>
</ul>
<h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><p>http请求由三部分组成，分别是：请求行、消息报头、请求正文<br><img src="http://oeqjkf4st.bkt.clouddn.com/http_brief_03.png" alt="http请求"></p>
<h2 id="http响应"><a href="#http响应" class="headerlink" title="http响应"></a>http响应</h2><p>HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文<br><img src="http://oeqjkf4st.bkt.clouddn.com/http_brief_04.png" alt="http响应"></p>
<p>参考链接:</p>
<ul>
<li><a href="http://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html" target="_blank" rel="external">HTTP协议详解（真的很经典）</a></li>
<li><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">httpie - github</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm 常用命令]]></title>
      <url>https://xiie.github.io/2016/10/npm-commands/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>
</blockquote>
<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="本地安装pkg"><a href="#本地安装pkg" class="headerlink" title="本地安装pkg"></a>本地安装pkg</h3><p>pkg会被下载到当前所在目录，也只能在当前目录下使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express</div></pre></td></tr></table></figure></p>
<h3 id="全局安装pkg"><a href="#全局安装pkg" class="headerlink" title="全局安装pkg"></a>全局安装pkg</h3><p>pkg会被下载到到特定的系统目录下，安装的pkg能够在所有目录下使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g express</div></pre></td></tr></table></figure></p>
<h3 id="通过package-json进行安装"><a href="#通过package-json进行安装" class="headerlink" title="通过package.json进行安装"></a>通过package.json进行安装</h3><p>如果我们的项目依赖了很多package，一个一个地安装那将是个体力活。我们可以将项目依赖的包都在package.json这个文件里声明，然后一行命令搞定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<h3 id="卸载pkg"><a href="#卸载pkg" class="headerlink" title="卸载pkg"></a>卸载pkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm uninstall express</div></pre></td></tr></table></figure>
<h3 id="查看当前目录下安装的pkg"><a href="#查看当前目录下安装的pkg" class="headerlink" title="查看当前目录下安装的pkg"></a>查看当前目录下安装的pkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ls</div></pre></td></tr></table></figure>
<h3 id="查看全局环境下安装的pkg"><a href="#查看全局环境下安装的pkg" class="headerlink" title="查看全局环境下安装的pkg"></a>查看全局环境下安装的pkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm list -g --depth 0</div></pre></td></tr></table></figure>
<h3 id="更新pkg"><a href="#更新pkg" class="headerlink" title="更新pkg"></a>更新pkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update express</div></pre></td></tr></table></figure>
<h3 id="搜索pkg"><a href="#搜索pkg" class="headerlink" title="搜索pkg"></a>搜索pkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm search express</div></pre></td></tr></table></figure>
<hr>
<h2 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h2><h3 id="查看所有配置"><a href="#查看所有配置" class="headerlink" title="查看所有配置"></a>查看所有配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config list</div></pre></td></tr></table></figure>
<h3 id="替换包源"><a href="#替换包源" class="headerlink" title="替换包源"></a>替换包源</h3><p>原生的npm从<a href="http://registry.npmjs.org/下载包，该网站虽然未被墙，但是服务器在国外不稳定有时候会很慢或失效。" target="_blank" rel="external">http://registry.npmjs.org/下载包，该网站虽然未被墙，但是服务器在国外不稳定有时候会很慢或失效。</a><br>解决的办法是将下载源更改成国内的npm包源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 方法一:通过config命令</div><div class="line">npm config set registry https://registry.npm.taobao.org </div><div class="line">npm info underscore （如果上面配置正确这个命令会有字符串response）</div><div class="line"></div><div class="line">// 方法二:命令行指定</div><div class="line">npm --registry https://registry.npm.taobao.org info underscore</div><div class="line"></div><div class="line">// 方法三:编辑  ~/.npmrc 加入下面内容</div><div class="line">registry = https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h3 id="设置proxy"><a href="#设置proxy" class="headerlink" title="设置proxy"></a>设置proxy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm config set proxy http://proxy.example.com:8080</div><div class="line">// or</div><div class="line">npm set proxy http://proxy.example.com:8080    </div><div class="line"></div><div class="line">// review proxy setting</div><div class="line">npm config get proxy</div><div class="line"></div><div class="line">// delete proxy setting</div><div class="line">npm delete proxy</div></pre></td></tr></table></figure>
<hr>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>上文提到的node项目中使用的package.json文件可以这样自动生成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mkdir test</div><div class="line">$ cd test</div><div class="line">$ npm init</div><div class="line"></div><div class="line">$ npm install express --save //添加到 package.json 文件中 dependencies 依赖列表中</div><div class="line">// or </div><div class="line">$ npm install express //临时安装 Express，不想将它添加到依赖列表中</div></pre></td></tr></table></figure></p>
<p>参考链接:</p>
<ul>
<li><a href="http://www.tuicool.com/articles/VB7nYn" target="_blank" rel="external">NPM小结 - 程序猿小卡</a></li>
<li><a href="http://blog.csdn.net/wjqiu/article/details/50549879" target="_blank" rel="external"> nodeJS下npm下载包慢的解决方法</a></li>
<li><a href="http://www.cnblogs.com/tzyy/p/5193811.html" target="_blank" rel="external">package.json属性详解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL 注入]]></title>
      <url>https://xiie.github.io/2016/10/SQL-Injection/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>永远都别信任客户端</p>
</blockquote>
<a id="more"></a>
<h2 id="神马是-SQL注入"><a href="#神马是-SQL注入" class="headerlink" title="神马是 SQL注入"></a>神马是 SQL注入</h2><p>通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令.</p>
<h2 id="具体都有哪些-SQL注入-手段"><a href="#具体都有哪些-SQL注入-手段" class="headerlink" title="具体都有哪些 SQL注入 手段"></a>具体都有哪些 SQL注入 手段</h2><h3 id="注入木马"><a href="#注入木马" class="headerlink" title="注入木马"></a>注入木马</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT &apos;&lt;? php eval($_POST[cmd]);?&gt;&apos; INTO OUTFILE &apos;/home/www/trojan.php&apos;;</div></pre></td></tr></table></figure>
<h3 id="篡改当前sql语句"><a href="#篡改当前sql语句" class="headerlink" title="篡改当前sql语句"></a>篡改当前sql语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table_name WHERE id = 1 OR SELECT * FROM user_table;</div></pre></td></tr></table></figure>
<h3 id="执行多条sql语句"><a href="#执行多条sql语句" class="headerlink" title="执行多条sql语句"></a>执行多条sql语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM table_name WHERE id = 1;DELETE FROM table_name;</div></pre></td></tr></table></figure>
<h2 id="一个简单粗暴的参数过滤函数-PHP"><a href="#一个简单粗暴的参数过滤函数-PHP" class="headerlink" title="一个简单粗暴的参数过滤函数(PHP)"></a>一个简单粗暴的参数过滤函数(PHP)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">params_filter</span><span class="params">($str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($str)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    $str = str_ireplace(<span class="string">'insert'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'delete'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'update'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'select'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'join'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'union'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'where'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'like'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'drop'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'create'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'modify'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'rename'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'alter'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'or'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'and'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'into'</span>,<span class="string">''</span>,$str);</div><div class="line">    $str = str_ireplace(<span class="string">'-'</span>,<span class="string">''</span>,$str);</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双”-“进行转换等。</li>
<li>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li>
<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>
<li>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li>
<li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li>
<li>sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</li>
</ul>
<p>参考链接:</p>
<ul>
<li><a href="http://www.runoob.com/mysql/mysql-sql-injection.html" target="_blank" rel="external">MySQL 及 SQL 注入</a></li>
<li><a href="http://www.freebuf.com/articles/web/68527.html" target="_blank" rel="external">如何在PHP应用中防止SQL注入</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令]]></title>
      <url>https://xiie.github.io/2016/10/Git/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>Git是目前世界上最先进的分布式版本控制系统（没有之一）</p>
</blockquote>
<a id="more"></a>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 本地创建仓库</div><div class="line">$ mkdir learngit</div><div class="line">$ cd learngit</div><div class="line">$ git init</div><div class="line">$ git add readme.txt</div><div class="line">$ git commit -m &quot;add a readme file&quot;</div><div class="line"></div><div class="line">// 添加远程仓库地址</div><div class="line">$ git remote add origin https://git.coding.net/philo_xiie/git_test.git</div><div class="line">$ git push origin master</div><div class="line"></div><div class="line">// 从远程仓库拉取</div><div class="line">$ git pull origin master</div><div class="line"></div><div class="line">// 从远程仓库拷贝</div><div class="line">$ git clone https://git.coding.net/philo_xiie/git_test.git</div><div class="line"></div><div class="line">// 修改远程仓库地址</div><div class="line">$ git remote rm origin</div><div class="line">$ git remote add origin [url]</div></pre></td></tr></table></figure>
<h2 id="git仓库地址形式-免密码"><a href="#git仓库地址形式-免密码" class="headerlink" title="git仓库地址形式(免密码)"></a>git仓库地址形式(免密码)</h2><ul>
<li>HTTPS: <a href="https://username:yourpassword@git.coding.net/philo_xiie/git_test.git" target="_blank" rel="external">https://username:yourpassword@git.coding.net/philo_xiie/git_test.git</a></li>
<li>SSH  : git@git.coding.net:philo_xiie/git_test.git</li>
</ul>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="查看版本历史"><a href="#查看版本历史" class="headerlink" title="查看版本历史"></a>查看版本历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline</div><div class="line">$ git show [commit-id]</div></pre></td></tr></table></figure>
<h3 id="查看版本差异"><a href="#查看版本差异" class="headerlink" title="查看版本差异"></a>查看版本差异</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 显示工作版本(Working tree)和HEAD的差别</div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line">// 比较上次提交commit和上上次提交</div><div class="line">$ git diff HEAD^ HEAD</div><div class="line">// 或</div><div class="line">$ git diff HEAD~1 HEAD</div><div class="line"></div><div class="line">// 查看已经暂存起来的文件(staged)和上次提交时的快照之间(HEAD)的差异</div><div class="line">$ git diff --cached</div><div class="line">$ git diff --staged</div></pre></td></tr></table></figure>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 回退到上一个版本</div><div class="line">$ git reset --hard HEAD^</div><div class="line"></div><div class="line">// 撤销上次的回退</div><div class="line">$ git reflog</div><div class="line">c7576ad HEAD@&#123;0&#125;: reset: moving to c7576ad</div><div class="line">d691091 HEAD@&#123;1&#125;: reset: moving to HEAD^</div><div class="line">c7576ad HEAD@&#123;2&#125;: commit: modify ver1</div><div class="line">d691091 HEAD@&#123;3&#125;: commit: version 2</div><div class="line">5d57445 HEAD@&#123;4&#125;: commit: version 1</div><div class="line">de4bac6 HEAD@&#123;5&#125;: commit (initial): first commit</div><div class="line">$ git reset --head [HEAD]</div><div class="line"></div><div class="line">// 撤销修改(从暂存区到工作区)</div><div class="line">$ git reset HEAD ver1.md</div><div class="line"></div><div class="line">// 删除修改(从工作区删除)</div><div class="line">$ git checkout -- ver1.md</div></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ git branch //查看当前分支</div><div class="line">$ git branch dev //在当前分支上创建一个新的分支</div><div class="line">$ git checkout dev //切换到dev分支</div><div class="line"></div><div class="line">$ git checkout -b dev//从当前分支创建并切换到dev分支</div><div class="line"></div><div class="line">$ git merge dev //将dev分支合并到当前分支</div><div class="line">$ git branch -d dev //删除dev分支，注：不能删除当前在的分支上</div><div class="line"></div><div class="line"></div><div class="line">// 创建一个BUG分支</div><div class="line">$ git add * //stash只能储藏暂存区中的内容</div><div class="line">$ git stash //把当前工作现场“储藏”起来，等以后恢复现场后继续工作</div><div class="line"></div><div class="line">$ git stash list</div><div class="line">$ git stash apply stash@&#123;0&#125;</div><div class="line">$ git stash drop //清除stash</div><div class="line">// 或</div><div class="line">$ git stash pop //调出stash并清除</div></pre></td></tr></table></figure>
<h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git tag  //查看标签列表</div><div class="line">$ git show v1.0  //查看某个标签信息</div><div class="line"></div><div class="line">$ git tag -a v1.0 -m &apos;version 1.0&apos;  //对当前版本打上标签</div><div class="line">$ git tag -a v0.5 &lt;commit-id&gt;  //对之前的版本打上标签</div><div class="line"></div><div class="line">$ git tag -d v0.5  //删除标签</div><div class="line"></div><div class="line">$ git push origin v0.5  //提交某个标签</div><div class="line">$ git push origin --tags  //提交所有的标签</div></pre></td></tr></table></figure>
<h2 id="git与svn的差异"><a href="#git与svn的差异" class="headerlink" title="git与svn的差异"></a>git与svn的差异</h2><ul>
<li>git即使在没有连接远程仓库情况下也可以正常工作，git是分布式的，而svn是集中式的</li>
<li>git的版本号是用SHA1计算出来的一个非常大的数字，可以避免多人协作下的版本号冲突</li>
<li>git有暂存区</li>
<li>git非常得快</li>
</ul>
<p>相关链接:</p>
<ul>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">Git教程</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
